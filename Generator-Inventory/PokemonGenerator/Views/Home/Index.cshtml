@{
    ViewData["Title"] = "Get Pokémon";
}

<!-- Bootstrap CSS -->
<link
href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
rel="stylesheet"
integrity="sha384-ENjdO4Dr2bkBIFxQpeoH6449QGtG2YVSc0H1LkD3u0hBMVgFiIbbVYUew+OrCXaR"
crossorigin="anonymous"
/>

<style>
    .selectable-card:hover {
    transform: scale(1.05);
    transition: transform 0.2s;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    cursor: pointer;
    }

    #error-alert {
    display: none;
    }
</style>

<div class="container py-5">
    <h1 class="mb-4">Welcome to the Pokémon Trading App</h1>

    <div id="error-alert" class="alert alert-warning" role="alert">
        <!-- JS will insert error message here -->
    </div>

    @if (User.Identity?.IsAuthenticated ?? false)
    {
        <button id="get-starter-btn" class="btn btn-primary me-2">
            Get Pokémon
        </button>

        <button id="view-stored-btn" class="btn btn-secondary">
            View Stored Pokémon
        </button>
    }
    else
    {
        <h3>Please login to use this website to its fullest!</h3>

        <div style="padding: 3vh; margin: 3vh;">
            <a class="poke-login-btn me-2" asp-area="" asp-controller="Account" asp-action="Login">Login</a>
            <a class="poke-login-btn" asp-area="" asp-controller="Account" asp-action="Register">Register</a>
        </div>
    }

</div>

<!-- Modal -->
<div class="modal fade" id="starterModal" tabindex="-1" aria-labelledby="starterModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">

      <div class="modal-header">
        <h5 class="modal-title" id="starterModalLabel">Choose Your Starter Pokémon</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>

      <div class="modal-body">
        <div id="starterContainer" class="d-flex flex-wrap justify-content-center">
          <!-- Cards will be injected here -->
        </div>
      </div>

      <div class="modal-footer">
        <!-- No viewStoredInModal button here, so we'll guard in JS -->
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          Close
        </button>
      </div>

    </div>
  </div>
</div>

@section Scripts {
      <script
        src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-qQsiP3IrUcbn5Sphc3sZSAqtVjIheGkSagjW69V+z8e8i6M9xsAN0nNQ+FNrN83E"
        crossorigin="anonymous">
      </script>

      <script>
        // Main-page buttons
        document.getElementById('view-stored-btn').addEventListener('click', () => {
          window.location.href = '/Pokemon/ViewStored';
        });

        document.getElementById('get-starter-btn').addEventListener('click', async (e) => {
          e.preventDefault();

          // reset error alert
          const errorAlert = document.getElementById('error-alert');
          errorAlert.style.display = 'none';
          errorAlert.textContent = '';

          try {
            // fetch random starters
            const resp = await fetch('/Pokemon/GetRandomPokemonsJson', {
              method: 'GET',
              headers: { 'Accept': 'application/json' }
            });

            if (!resp.ok) {
              const errData = await resp.json().catch(() => null);
              throw new Error(errData?.message || 'Network error');
            }

            const pokemons = await resp.json();
            const container = document.getElementById('starterContainer');
            container.innerHTML = '';

            // build cards
            pokemons.forEach(p => {
              const card = document.createElement('div');
              card.className = 'card m-2 text-center selectable-card';
              card.style.width = '120px';
              card.innerHTML = `
                <img src="${p.spriteUrl}" class="card-img-top" alt="${p.name}" />
                <div class="card-body p-1">
                  <h6 class="card-title mb-0">${p.name}</h6>
                </div>`;

              card.addEventListener('click', async () => {
                try {
                  const response = await fetch(`/Pokemon/StoreSelectedPokemon?id=${p.pokemonId}`, {
                    method: 'POST'
                  });
                  if (!response.ok) throw new Error('Failed to store Pokémon');

                  // hide modal and redirect
                  const modalEl = document.getElementById('starterModal');
                  const modalInstance = bootstrap.Modal.getInstance(modalEl);
                  modalInstance.hide();
                  window.location.href = '/Pokemon/ViewStored';

                } catch {
                  alert('Could not select this Pokémon.');
                }
              });

              container.appendChild(card);
            });

            // show modal
            const modal = new bootstrap.Modal(document.getElementById('starterModal'));
            modal.show();

            // *** OPTION 2: guard against missing element ***
            const viewBtn = document.getElementById('viewStoredInModal');
            if (viewBtn) {
              viewBtn.addEventListener('click', () => {
                window.location.href = '/Pokemon/ViewStored';
              });
            }

          } catch (err) {
            console.error(err);
            errorAlert.textContent = err.message;
            errorAlert.style.display = 'block';
          }
        });
      </script>
}